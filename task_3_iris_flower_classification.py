# -*- coding: utf-8 -*-
"""Task_3:Iris Flower Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a3Nvo4Yzj19JlZBcg_1uUXpHWuukh43Q

Task_3:Iris Flower Classification

Importing Important Libraries
"""

import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

"""Importing Datasets"""

df = pd.read_csv('IRIS.csv')
df.head()

df['species'],categories = pd.factorize(df['species'])
df.head()

df.describe

df.isna().sum()

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111,projection ='3d')
ax.scatter(df.petal_length,df.petal_width,df.species)
ax.set_xlabel('petallengthCm')
ax.set_ylabel('petalwidthCm')
ax.set_zlabel('Species')
plt.title('3D Scatter Plot Example')
plt.show()

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111,projection ='3d')
ax.scatter(df.sepal_length,df.sepal_width,df.species)
ax.set_xlabel('SepalLengthCm')
ax.set_ylabel('SepalWidthCm')
ax.set_zlabel('Species')
plt.title('3D Scatter Plot Example')
plt.show()

"""Thus 3-D plot gives us the glimpse of species of iris flower is more inclined towards the variables petal length and petal width"""

sns.scatterplot(data = df,x="sepal_length",y = "sepal_width",hue = "species")

sns.scatterplot(data = df,x="petal_length",y = "petal_width",hue = "species")

"""Apllying Elbow Technique"""

k_rng = range(1,10)
sse = []
for k in k_rng:
  km = KMeans(n_clusters = k)
  km.fit(df[['petal_length','petal_width']])
  sse.append(km.inertia_)

sse

plt.xlabel('k_rng')
plt.ylabel("Sum of Squared errors")
plt.plot(k_rng,sse)

"""Applying KMean Algorithm"""

km = KMeans(n_clusters=3,random_state=0,)
y_predicted = km.fit_predict(df[['petal_length','petal_width']])
y_predicted

df['cluster']=y_predicted
df.head(150)

"""Accuracy Measure"""

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(df.species,df.cluster)
cm

true_labels = df.species
predicted_labels = df.cluster
cm = confusion_matrix(true_labels,predicted_labels)
class_labels = ['Setosa','versicolor','virginica']
# plot confusion matrix
plt.imshow(cm,interpolation='nearest',cmap = plt.cm.Blues)
plt.title('Confusion Matrix')
plt.colorbar()
tick_marks = np.arange(len(class_labels))
plt.xticks(tick_marks,class_labels)
plt.yticks(tick_marks,class_labels)
#Fill matrix with values
for i in range(len(class_labels)):
   for j in range(len(class_labels)):
      plt.text(j,i,str(cm[i][j]),ha = 'center',va ='center',color ='white')
plt.xlabel('Predicted label')
plt.ylabel('True label')
plt.show()